function init(obj)
%UIVIDEOVIEWER/INIT   Scalar-object one-time initialization during construction
%   INIT(OBJ) is called by the HGSETGETEX's constructor and shall
%   initialize OBJ's internal properties that are must be initialized prior
%   to setting any of its public properties or calling any of its public
%   methods. Before implementing necessary actions for the class, it should
%   call the INIT() of the superclass first.

obj.init@uipanelex();

% initialize the timer object and other internal properties
obj.tmr = timer('ExecutionMode', 'fixedRate',...
   'TimerFcn', @(~,~)obj.timerfcn, 'BusyMode', 'drop');
obj.tmr_skp = false;
obj.n = 1;
obj.nbuf = [inf -inf];
obj.txoffset = 0; % frame counter offset (0=one-base frame index, -1=zero-base frame index)
obj.Tmin = 1e-2; % minimum playback frame period allowed
obj.Qdec = 1;    % frame decimation factor
obj.dsonly = true; % true to downsample only (no averaging of frames)

obj.propopts.Visible = struct(...
   'StringOptions',{{'on','off'}});
obj.propopts.AutoPlay = struct(...
   'StringOptions', {{'on' 'off'}},...
   'Default','off');
obj.propopts.AutoRewind = struct(...
   'StringOptions',{{'on' 'off'}},...
   'Default','on');
obj.propopts.AutoUnloadVideoReader = struct(...
   'StringOptions',{{'on' 'off'}},...
   'Default','off');
obj.propopts.CounterColor = struct(...
   'OtherTypeDesc',{{'ColorSpec'}});
obj.propopts.CounterFormat = struct(...
   'OtherTypeValidator',@(val)validateformat(val),...
   'Default','%fffff');
obj.propopts.CounterFrameRate = struct(...
   'MixedType',true,...
   'StringOptions',{{'video'}},...
   'OtherTypeValidator',{{{'numeric'},{'positive','scalar','finite'}}},...
   'Default','video');
obj.propopts.CounterFrameIndexOffset = struct(...
   'OtherTypeValidator',{{{'numeric'},{'scalar','integer'}}},...
   'Default',1);
obj.propopts.CounterFontName = struct(...
   'OtherTypeValidator',@(val)any(strcmpi(val,listfonts())));
obj.propopts.CounterFontSize = struct(...
   'OtherTypeValidator',{{{'numeric'},{'scalar','positive','finite'}}});
obj.propopts.CounterFontWeight = struct(...
   'StringOptions',{{'light' 'normal' 'demi' 'bold'}});
obj.propopts.CounterLocation = struct(...
   'StringOptions',{{'none','north','south','west','east','northwest','northeast','southwest','southeast'}},...
   'Default','southeast',...
   'ToCode',[4 1 7 3 5 0 2 6 8],...
   'ToIndex',[6 2 7 4 1 5 8 3 9]);
obj.propopts.CurrentFrame = struct(...
   'OtherTypeValidator',@(val)validateattributes(val,{'numeric'},...
            {'scalar','positive','finite','integer','<=',obj.vr.NumberOfFrames}));
obj.propopts.FrameRate = struct(...
   'OtherTypeValidator',{{{'numeric'},{'scalar','positive','finite'}}});
obj.propopts.FrameRateMode = struct(...
   'StringOptions',{{'auto' 'manual'}},...
   'Default','auto');
obj.propopts.PlaybackRange = struct(...
   'MixedType',true,...
   'StringOptions',{{'all'}},...
   'OtherTypeDescription',{{'[start end]'}},...
   'OtherTypeValidator',{{{'numeric'},{'numel',2,'nondecreasing','positive','integer'}}},...
   'Default','all');
obj.propopts.Running = struct([]);
obj.propopts.Repeat = struct(...
   'StringOptions',{{'on','off'}},...
   'Default','off');
   
obj.propopts.VideoReader = struct([]);
obj.propopts.VideoDuration = struct([]);
obj.propopts.VideoName = struct([]);
obj.propopts.VideoPath = struct([]);
obj.propopts.BitsPerPixel = struct([]);
obj.propopts.Height = struct([]);
obj.propopts.NumberOfFrames = struct([]);
obj.propopts.VideoFormat = struct([]);
obj.propopts.Width = struct([]);

% format propopts & update nprops
obj.sortpropopts([],false,true,true,true);

end

function validateformat(val)
validateattributes(val,{'char'},{'row'});
if ~isempty(regexp(val,'(?!%[%fhmsp])%[^%fhmsp]','once'))
   error('Format contains invalid conversion character.');
end
end
